<?php

/*
 * ******************************************************************************

  Developed by Daniel Jordao Santana (daniel.js@gmail.com)
  Copyright (c) 2017 - Zillius Solutions (www.zillius.com.br)
  Code changes not allowed, doing so will lose warranty of its functionality!

  All rights reserved.

 * ******************************************************************************
 */

abstract class BaseView
{

    protected $id;
    protected $detect;
    protected $key_factory;
    protected $config;
    public $fields;
    protected $data = array();
    protected $sidebar_data = array();
    protected $module;
    public $model;
    public $action;
    protected $form_config = array();
    public static $_is_optional = 0;
    public static $_maxlength = 1;
    public static $_minlength = 2;
    public static $_data_type = 3;
    public static $_label = 4;
    public static $_value = 5;
    public static $_type = 6;
    public static $_description = 7;
    
    public static $_options = 9;
    public static $_new_rel = 10;
    public static $_css_field = 'form-control autogenerated';
    private $base_file = '';
    private $max_fd_dgrid = 8;

    public function __construct($module)
    {

        $this->key_factory = KeyFactory::singleton();

        $this->app = $this->key_factory->get('app_name');
        $this->config = $this->key_factory->get($module . '_config');
        $this->fields = $this->key_factory->get($module . '_fields');
        $this->action = $this->key_factory->get($module . '_action');
        $this->module = $this->key_factory->get('module_name');
        $this->id = $this->key_factory->get('module_params');

        //$this->fields[$this->config['id_column']] = $this->id;

        $this->model = $this->key_factory->get($module . '_model');

        $this->sidebar_data['module'] = $module;

        $this->form_config = array('form_action' => $module . "/save/", 'form_action_success' => $this->module, 'allow_delete' => true);

        $this->base_file = APP_ROOT . $this->app . "/" . $this->module . "/";

    }

    ### Getters and Setters ############################################

    public function format($field, $value)
    {

        if (isset($this->fields[$field]))
        {
            if (!isset($this->fields[$field][self::$_data_type]))
                die($field . " type unset!");

            switch ($this->fields[$field][self::$_data_type])
            {
                case "DATE" : $this->fields[$field][self::$_value] = DateHelper::format($value);
                    break;
                case "DATETIME" : $this->fields[$field][self::$_value] = DateHelper::format($value, DEFAULT_DATE_FORMAT . " H:i:s");
                    break;
                case "CURRENCY" : $this->fields[$field][self::$_value] = number_format($value, 2, ',', '.');
                    break;
                case "DECIMAL" : $this->fields[$field][self::$_value] = number_format($value, 3, ',', '.');
                    break;                    
                default : $this->fields[$field][self::$_value] = $value;
                    break;
            }
            
            return $this->fields[$field][self::$_value];
        }
        else
            return $value;
    }

    public function set_title($value)
    {
        $_config = $this->config;
        $_config['object'] = $value;
        
        $this->key_factory->set($this->module . '_config', $_config);

    }

    public function set_field_value($field, $value)
    {
        $this->fields[$field][self::$_value] = ($value);
    }

    public function get_value($field)
    {
        return $this->fields[$field][self::$_value];
    }

    public function set_template_data($value)
    {
        $this->data[] = $value;
    }

    public function add_form_config($name, $value)
    {
        $this->form_config[$name] = $value;
    }

    public function set_sidebar_data($value)
    {
        $this->sidebar_data['sidebar'] = $value;
    }

    public function set_options($field, $value)
    {
        if (isset($this->fields[$field]))
            $this->fields[$field][self::$_options] = $value;
    }

    public function get_constant($constant_name)
    {
        return self::$$constant_name;
    }

    protected function get_id()
    {
        if (isset($this->fields[$this->config['id_column']]))
            return $this->fields[$this->config['id_column']][self::$_value];
        else
            return $this->id;
    }

    protected function get_field($name)
    {
        if (isset($this->fields[$name]))
            return $this->fields[$name][self::$_value];
        else
            return '';
    }

    protected function get_action()
    {
        return $this->key_factory->get($this->module . '_action');
    }

    ### Controllers View ############################################

    public function index(&$db_data)
    {
        $template_data['_tuples'] = $db_data;

        Render::open_html();
        Render::custom_javascript("lib/application/admin/common/js/global.js");
        $this->layout($template_data, true);
        //Render::div_ajax_message();
        Render::close_html();
    }

    public function edit($id)
    {
        $this->id = $id;

        $this->add_form_config('form_action', $this->form_config['form_action'] . $id);

        Render::open_html();
        Render::crud_javascript();
        Render::custom_javascript("lib/application/admin/common/js/global.js");
        Render::div_ajax_message();
        $this->edit_form();
        Render::close_html();
    }

    public function edit_tabbed($id, &$template_data = array())
    {
        $this->id = $id;

        $this->add_form_config('form_action', $this->form_config['form_action'] . $id);

        $template_data['fields'] = $this->fields;
        $template_data['id'] = $id;
        $template_data['view_general'] = $this->edit_form(true, false);
        $template_data['config'] = $this->config;

        Render::open_html();
        Render::crud_javascript();
        Render::custom_javascript("lib/application/admin/common/js/global.js");
        $this->layout($template_data);
        //Render::div_ajax_message();		
        Render::close_html();
    }

    public function index_ajax(&$db_data)
    {
        $template_data = $db_data;

        $this->layout($template_data);
        Render::div_ajax_message();
    }

    public function edit_ajax($id)
    {
        $this->id = $id;

        Render::crud_javascript();
        $this->edit_form();
    }

    ### WebParts ############################################

    public function default_layout($data = array())
    {
        $this->layout($data, true);
    }

    public function layout(&$data = array(), $full_layout = false, $file = "", $load_js = true)
    {        
        $this->action = $this->get_action();

        if ($this->action == "")
            $this->action = "index";

        if ($full_layout)
        {
            Render::open_html();
            if ($load_js)
                Render::default_javascript();

            if (!$this->check_templ_exists($this->choose_template($file)))
            {
                switch ($this->action)
                {
                    case "list_page":
                    case "list_all":
                        $this->show_datagrid($this->key_factory->get($this->module . '_fields'), $data);
                        break;
                    case "edit":
                    case "update":
                    case "create":
                    case "detail":

                        $this->edit($data[$this->config['id_column']]);
                        break;
                }
            }
            else
                $this->load_view($data, $file);

            Render::close_html();
        }
        else
        {
            if ($load_js)
                Render::default_javascript();

            $content = $this->load_view($data, $file);


        }
    }

    public function sidebar($return = false)
    {
        $content = "<div id='sidebar'>";
        if (isset($this->config['object']))
        {
            if (substr($this->config['object'], strlen($this->config['object']) - 1, 1) == "s")
                $sidebar_title = $this->config['object'];
            else
                $sidebar_title = $this->config['object'] . "s";

            $content .= "<h2>" . $sidebar_title . "</h2>";
        }

        if (isset($this->config['sidebar']))
            $content .= $this->load_view($this->sidebar_data, "sidebar", true);

        $content .= "</div>";

        if ($return)
            return $content;

        echo $content;
    }

    public function toolbar($data = array())
    {
        $data['__id'] = $this->id;
        Render::toolbar($data);
    }

    public function list_images(&$data)
    {

        $this->layout($data, false, "list_images");
    }

    public function list_tags(&$data)
    {

        $this->layout($data, false, "list_tags");
    }

    public function show_datagrid($fields, &$data, $return = false)
    {        
        if (!$return)
        {
            Render::open_html();
            Render::default_javascript();
        }

        $html = '<div class="container">';

        if (isset($this->config['module_info']))
            $html .= Render::panel_info($this->config['object'], $this->config['module_info']);

        $html .= '<div class="row">
                    <div class="col-md-12">
                        <div class="portlet light bordered">
                            <div class="portlet-title">
                                <div class="caption">
                                    <i class="icon-settings font-dark"></i>
                                    <span class="caption-subject font-dark sbold uppercase">Listagem</span>
                                </div>
                            </div>
                            <div class="portlet-body">
                                <div class="table-toolbar">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="btn-group">
                                            <a href="?' . $this->module . '/create">
                                                <button id="sample_editable_1_new" class="btn sbold green"> ' . System::get_i18n_term("datagrid.button.insert") .'
                                                    <i class="fa fa-plus"></i>
                                                </button>
                                            </a>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="btn-group pull-right">
                                                <button class="btn green  btn-outline dropdown-toggle" data-toggle="dropdown">Ações
                                                    <i class="fa fa-angle-down"></i>
                                                </button>
                                                <ul class="dropdown-menu pull-right">
                                                    <li>
                                                        <a href="javascript:;">
                                                            <i class="fa fa-file-excel-o"></i> Exportar CSV </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>';

        $field_counter = 1;
        //$html .= "<form id=\"module_list\" method=\"post\" action=\"?" . $this->module ."/delete_many\">\r\n";
        $html .= '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="sample_1">';
        $html .= " <thead>\r\n";
        $html .= "  <tr>\r\n";
        $html .= "   <th width=\"25\"><input type='checkbox' class='group-checkable' data-set='#sample_1 .checkboxes' /> </th></th>\r\n";

        $display_fields = $this->key_factory->get($this->module . '_datagrid');

        foreach ($fields as $field => $attributes)
        {
            if (isset($display_fields) && !array_search($field, $display_fields))
                continue;

            if (($attributes[self::$_type] != "none") && ($field_counter < $this->max_fd_dgrid))
            {
                $html .= "<th>" . $attributes[self::$_label] . "</th>\r\n";
                $field_counter++;
            }
        }

        $html .= "  </tr>\r\n";
        $html .= "  </thead>\r\n";
        $html .= "  <tbody>\r\n";
        $i = 1;

        if(isset($data['_tuples']))
            $data = $data['_tuples'];

        if (!is_array($data))
            $data = array();

        foreach ($data as $registry)
        {
            $counter = 1;

            $_registry = array_values($registry);

            $html .= "  <tr style='cursor: pointer;' class=\"" . (($i % 2 == 0) ? "odd" : "") . "\" onclick=''>\r\n";
            $html .= "  <td><input class='checkboxes' type=\"checkbox\" name=\"id_s[]\" id=\"id_s\" value=\"" . $registry[$this->config['id_column']] . "\"/></td>\r\n";

            foreach ($fields as $field => $attributes)
            {
                if (isset($display_fields) && !array_search($field, $display_fields))
                    continue;

                $this->format($field, $registry[$field]);

                if ($counter < $this->max_fd_dgrid)
                {
                    switch ($attributes[self::$_type])
                    {
                        case 'text' :
                        case 'label' :
                        case 'textfield' :
                        case 'combo' :
                        case 'checkbox' :
                        case 'radiobox' :
                        case 'link' :
                            $html .= "  <td onclick=\"go_action('" . $this->module . "', 'detail', '" . $registry[$this->config['id_column']] . "');\">" . $this->get_value($field) . "</td>\r\n";
                            break;
                        case 'password' :
                            $html .= "  <td onclick=\"go_action('" . $this->module . "', 'detail', '" . $registry[$this->config['id_column']] . "');\">******</td>\r\n";
                            break;
                        case 'textarea' :
                        case 'html' :
                            $html .= "  <td onclick=\"go_action('" . $this->module . "', 'detail', '" . $registry[$this->config['id_column']] . "');\">" . StringHelper::left(strip_tags($registry[$field]), 30) . "...</td>\r\n";
                            break;
                    }
                }
                $counter++;
            }

            $html .= "  </tr>\r\n";
            $i++;
        }
        $html .= "  </tbody>";

        $html .= " </table>";
        //$html .= "</form>";
        $html .= "</div></div></div></div></div>";

        $html .= "<script src='assets/global/scripts/datatable.js' type='text/javascript'></script>";
        $html .= "<script src='assets/global/plugins/datatables/datatables.min.js' type='text/javascript'></script>";
        $html .= "<script src='assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.js' type='text/javascript'></script>";
        $html .= "<script src='assets/pages/scripts/table-datatables-managed.min.js' type='text/javascript'></script>";      

        if ($return)
            return $html;
        else
        {
            echo $html;
            Render::close_html();
        }
    }

    public function show_field($field, $css, $value = "")
    {


        $html = "";

        if (isset($this->fields[$field]))
        {

            $params = $this->fields[$field];

            if($value != "")
                $params[self::$_value] = $value;

            if ($params[self::$_type] == 'none')
                return;

            if ($field == $this->config['id_column'])
                $html .= "<input type='hidden' value='" . $params[self::$_value] . "' name='" . $field . "' id='" . $field . "' />";

            if (!isset($params[self::$_type]))
                echo "ERROR: " . $field . " UNSET! : ";

            switch ($params[self::$_type])
            {
                case 'text' :
                    $html .= $params[self::$_value] . "\r\n";
                    $html .= "<input type='hidden' name='" . $field . "' value='" . $params[self::$_value] . "'/>\r\n";
                    break;

                case 'textfield' :

                    $field_id = ($params[self::$_data_type] == 'DATE') ? "datepicker" : $field;

                    $html .= "<input class='" . self::$_css_field . " $css' name='" . $field . "' id='" . $field_id . "' type='text' value='" . $params[self::$_value] . "' maxlength='" . $params[self::$_maxlength] . "'/>\r\n";
                    break;
                case 'password' :
                    $html .= "<input class='" . self::$_css_field . " $css' name='" . $field . "' id='" . $field . "' type='password' value='" . $params[self::$_value] . "' maxlength='" . $params[self::$_maxlength] . "'/>\r\n";
                    break;
                case 'combo' :
                    $html .= "<select name='" . $field . "' class='" . self::$_css_field . " $css' id='" . $field . "'>\r\n";
                    $selected = (!isset($params[self::$_value]) || $params[self::$_value] == "" || $params[self::$_value] === NULL) ? ' selected="selected"' : '';
                    $html .= " <option value=''>" . (($params[self::$_is_optional] == 1) ? System::get_i18n_term("options.none") : System::get_i18n_term("options.choose")) . "</option>\r\n";

                    if (isset($params[self::$_options]))
                    {
                        foreach ($params[self::$_options] as $value)
                        {
                            //TODO: if is not numeric (default)

                            if (is_array($value))
                            {
                                $values_idx = array_values($value);

                                //$selected = ($params[self::$_value] == $values_idx[0] || strcasecmp($params[self::$_value], $values_idx[1]) == 0) ? ' selected="selected"' : '';
                                $selected = ($params[self::$_value] == $values_idx[0]) ? ' selected="selected"' : '';
                                $html .= "<option value='" . $values_idx[0] . "' " . $selected . ">" . $values_idx[1] . "</option>\r\n";
                            }
                            else
                            {
                                $selected = ($params[self::$_value] == $value[0]) ? ' selected="selected"' : '';
                                $html .= "<option value='" . array_search($value, $params[self::$_options]) . "' " . $selected . ">" . $value . "</option>\r\n";
                            }
                        }
                    }
                    else
                    {
                        $html .= '<option >No defined values. Need to use $controller->view->set_options()</option>';
                    }
                    $html .= "</select>\r\n";

                    /*
                      if(isset($params[self::$_new_rel]))
                      $html .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href='#' data-link='" . ADMIN_WEBROOT . "?" . $params[self::$_new_rel] . "/edit_ajax' class='btn_modal'>+</a>";
                     */
                    break;

                case 'checkbox' :
                    if (isset($params[self::$_options]))
                    {
                        foreach ($params[self::$_options] as $value)
                        {
                            $values_idx = array_values($value);

                            $html .= "<input type='checkbox' name='" . $field . "' id='" . $field . "' value='" . $values_idx[0] . "' " . ($params[self::$_value] == $values_idx[0] ? ' checked=true' : '') . " >";
                            $html .= $values_idx[1] . "\r\n";
                        }
                    }
                    else
                        $html .= "<input type='checkbox' name='" . $field . "' id='" . $field . "' value='1' " . ($params[self::$_value] == 1 ? ' checked=true' : '') . "/>";
                    $html .= "\r\n&nbsp;";
                    break;

                case 'radiobox' :
                    foreach ($params[self::$_options] as $value)
                    {
                        $values_idx = array_values($value);

                        $html .= "<input type='radio' name='" . $field . "' id='" . $field . "' value='" . $values_idx[0] . "' " . ($params[self::$_value] == $values_idx[0] ? ' checked=true' : '') . " >&nbsp;";
                        $html .= $values_idx[1] . "\r\n";
                    }
                    break;

                case 'textarea' : $html .= "<textarea name='" . $field . "' id='" . $field . "' class='" . self::$_css_field . " $css'>" . $params[self::$_value] . "</textarea>\r\n";
                    break;
                /*
                  case 'file'      :
                  $html .= "<input type='file' name='".$field."_new' id='".$field."_new'/>\r\n&nbsp;";
                  $html .= "<input type='hidden' name='".$field."' id='".$field."' value='".$params[self::$_value]."' />";
                  break;
                 */
                case 'html' :
                    $html .= Render::_html_editor($field, $params[self::$_value]);
                    break;

                case 'link' :
                    $html .= "<a href='?" . $params[self::$_value] . "'>" . System::get_i18n_term("options.change") . "</a>";
                    break;

                case 'label' :
                    $html .= "<span>";
                    $html .= (isset($params[self::$_value]) ? $params[self::$_value] : "");
                    $html .= "</span>";
                    break;
            }

            return $html;

        }        
    }

    public function edit_form($return = false, $frame = true)
    {

        $id = $this->get_id();
        $html = "";


        $html .= '<div class="row">';

        if($frame)
        {

            $html .= '  <div class="col-md-12">
                            <div class="portlet light bordered">
                                <div class="portlet-title">
                                    <div class="caption">
                                        <i class="icon-settings font-dark"></i>
                                        <span class="caption-subject font-dark sbold uppercase">Detalhes</span>
                                    </div>
                                </div>
                                <div class="portlet-body form">
                      ';
        }

        if (isset($this->config['module_info']))
            $html .= Render::panel_info($this->config['object'], $this->config['module_info']);

        $html .= "<form name='form_detail' id='form_detail' action='?" . $this->form_config['form_action'] . "' method='post' class='ajax-form form-horizontal row-border'>\r\n";
        $html .= '<div class="form-body">';

        //if(System::is_not_empty($this->form_config['title']))
        //$html .= "<fieldset><legend>" . System::get_i18n_term("detail.form.header", $this->form_config['title']) . "</legend>\r\n";
        //else
        //$html .= "<fieldset><legend>" . System::get_i18n_term("detail.form.header", $this->config['object']) . "</legend>\r\n";

        foreach ($this->fields as $field => $params)
        {

            if ($params[self::$_type] == 'none')
                continue;

            $html .= '<div class="form-group">';

            if ($params[self::$_type] != 'none' && $params[self::$_type] != 'hidden')
                $html .= '<label class="col-sm-3 control-label">' . $params[self::$_label] . '</label>';

            $html .= '<div class="col-sm-6">';

            if ($field == $this->config['id_column'])
            {


                $html .= "<input type='hidden' value='" . $params[self::$_value] . "' name='" . $field . "' id='" . $field . "' />";
                break;
            }

            //$html .= "<p>\r\n";

            if (!isset($params[self::$_type]))
                echo "ERROR: " . $field . " UNSET! : ";

            switch ($params[self::$_type])
            {
                case 'text' :
                    $html .= $params[self::$_value] . "\r\n";
                    $html .= "<input type='hidden' name='" . $field . "' value='" . $params[self::$_value] . "'/>\r\n";
                    break;

                case 'textfield' :

                    $field_id = ($params[self::$_data_type] == 'DATE') ? "datepicker" : $field;

                    $html .= "<input class='" . self::$_css_field . "' name='" . $field . "' id='" . $field_id . "' type='text' value='" . $params[self::$_value] . "' maxlength='" . $params[self::$_maxlength] . "'/>\r\n";
                    break;
                case 'password' :
                    $html .= "<input class='" . self::$_css_field . "' name='" . $field . "' id='" . $field . "' type='password' value='" . $params[self::$_value] . "' maxlength='" . $params[self::$_maxlength] . "'/>\r\n";
                    break;
                case 'combo' :
                    $html .= "<select name='" . $field . "' class='" . self::$_css_field . "' id='" . $field . "'>\r\n";
                    $selected = (!isset($params[self::$_value]) || $params[self::$_value] == "" || $params[self::$_value] === NULL) ? ' selected="selected"' : '';
                    $html .= " <option value=''>" . (($params[self::$_is_optional] == 1) ? System::get_i18n_term("options.none") : System::get_i18n_term("options.choose")) . "</option>\r\n";

                    if (isset($params[self::$_options]))
                    {
                        foreach ($params[self::$_options] as $value)
                        {
                            //TODO: if is not numeric (default)

                            if (is_array($value))
                            {
                                $values_idx = array_values($value);

                                //$selected = ($params[self::$_value] == $values_idx[0] || strcasecmp($params[self::$_value], $values_idx[1]) == 0) ? ' selected="selected"' : '';
                                $selected = ($params[self::$_value] == $values_idx[0]) ? ' selected="selected"' : '';
                                $html .= "<option value='" . $values_idx[0] . "' " . $selected . ">" . $values_idx[1] . "</option>\r\n";
                            }
                            else
                            {
                                $selected = ($params[self::$_value] == $value[0]) ? ' selected="selected"' : '';
                                $html .= "<option value='" . array_search($value, $params[self::$_options]) . "' " . $selected . ">" . $value . "</option>\r\n";
                            }
                        }
                    }
                    else
                    {
                        $html .= '<option >No defined values. Need to use $controller->view->set_options()</option>';
                    }
                    $html .= "</select>\r\n";

                    /*
                      if(isset($params[self::$_new_rel]))
                      $html .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href='#' data-link='" . ADMIN_WEBROOT . "?" . $params[self::$_new_rel] . "/edit_ajax' class='btn_modal'>+</a>";
                     */
                    break;

                case 'checkbox' :
                    if (isset($params[self::$_options]))
                    {
                        foreach ($params[self::$_options] as $value)
                        {
                            $values_idx = array_values($value);

                            $html .= "<input type='checkbox' name='" . $field . "' id='" . $field . "' value='" . $values_idx[0] . "' " . ($params[self::$_value] == $values_idx[0] ? ' checked=true' : '') . " >";
                            $html .= $values_idx[1] . "\r\n";
                        }
                    }
                    else
                        $html .= "<input type='checkbox' name='" . $field . "' id='" . $field . "' value='1' " . ($params[self::$_value] == 1 ? ' checked=true' : '') . "/>";
                    $html .= "\r\n&nbsp;";
                    break;

                case 'radiobox' :
                    foreach ($params[self::$_options] as $value)
                    {
                        $values_idx = array_values($value);

                        $html .= "<input type='radio' name='" . $field . "' id='" . $field . "' value='" . $values_idx[0] . "' " . ($params[self::$_value] == $values_idx[0] ? ' checked=true' : '') . " >&nbsp;";
                        $html .= $values_idx[1] . "\r\n";
                    }
                    break;

                case 'textarea' : $html .= "<textarea name='" . $field . "' id='" . $field . "' class='" . self::$_css_field . "'>" . $params[self::$_value] . "</textarea>\r\n";
                    break;
                /*
                  case 'file'      :
                  $html .= "<input type='file' name='".$field."_new' id='".$field."_new'/>\r\n&nbsp;";
                  $html .= "<input type='hidden' name='".$field."' id='".$field."' value='".$params[self::$_value]."' />";
                  break;
                 */
                case 'html' :
                    $html .= Render::_html_editor($field, $params[self::$_value]);
                    break;

                case 'link' :
                    $html .= "<a href='?" . $params[self::$_value] . "'>" . System::get_i18n_term("options.change") . "</a>";
                    break;

                case 'label' :
                    $html .= "<span>";
                    $html .= (isset($params[self::$_value]) ? $params[self::$_value] : "");
                    $html .= "</span>";
                    break;
            }


            $html .= '</div><div class="col-sm-3"><p class="help-block">' . (isset($params[self::$_description]) ? $params[self::$_description] : '') . '</p></div></div>';
        }

        $html .= Render::div_ajax_message("plcholder_ajax_msg", true);


        /*
          if($id != '' && isset($this->form_config['allow_delete']) && $this->form_config['allow_delete'] == true)
          $html .= "&nbsp;<input type='button' value='Delete' class='mws-button red' onclick='do_action(\"".$this->module."\", \"delete\", ".$id.");'/>";
         */

        //$html .= "&nbsp;<input type='button' value='" . System::get_i18n_term("options.cancel") . "' class='button' id='button_cancel'/>";
        //if(isset($this->form_config['adv_buttons']))
        //$html .= "&nbsp;<input type='button' value='" . System::get_i18n_term("options.preview") . "' class='button' id='button_draft'/>";
        //$html .= "&nbsp;<input type='submit' value='" . System::get_i18n_term("options.save") . "' class='button' id='button_submit'/>";

        $html .= "<input type='hidden' value='new:?" . $this->module . "/preview/{id}' id='preview_action' />";
        $html .= "<input type='hidden' value='?" . $this->form_config['form_action_success'] . "' id='success_action' />";

        $html .= '</div>';
        $html .= '
                    <div class="form-actions">
                        <div class="row">
                            <div class="col-sm-6 col-sm-offset-3">
                                <div class="btn-toolbar">
                                    <button type="button" class="btn-default btn" onclick="history.go(-1);">' . System::get_i18n_term("options.cancel") . '</button> ';

        if ($id != '' && isset($this->form_config['allow_delete']) && $this->form_config['allow_delete'] == true)
            $html .= " <button type='button' class='btn-danger btn' onclick='do_action(\"" . $this->module . "\", \"delete\", " . $id . ");'>" . System::get_i18n_term("options.delete") . "</button> ";


        $html .= '<button class="btn-primary btn">' . System::get_i18n_term("options.save") . '</button>';
        $html .= '              
                                </div>
                            </div>
                        </div>
                    </div>      
                </form>
                </div>';

        if($frame)        
        {
                $html .= '
                    </div>
                </div>
            </div>';

        }        

        if ($return)
            return $html;

        echo $html;
    }


    public function choose_template($_file)
    {        

        $file = $this->base_file . "template.";
        $file .= (($_file == "") ? $this->action : $_file) . ".php";

        return $file;
    }

    public function check_templ_exists($file)
    {
        return (file_exists($file));
    }

    public function load_view(&$template_data = array(), $file = "", $return = false)
    {        
        $template_data['__baseview'] = $this;
        $template_data['__id'] = $this->id;
        $template_data['_action'] = $this->get_action();
        $template_data['_module'] = $this->module;
        $template_data['_model'] = $this->model;
        $template_data['_config'] = $this->config;
        $template_data['_fields'] = $this->fields;

        $file = $this->choose_template($file);

        return Render::get_file($file, $template_data, $return);
    }

}
